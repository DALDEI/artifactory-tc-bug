/*
 * Copyright (C) 2013 JFrog Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
  repositories {
    jcenter()
  }
}

def javaProjects() {
    subprojects.findAll { new File(it.projectDir, 'src').directory }
} 


allprojects {
  apply plugin: 'java'
  apply plugin: 'maven-publish'
  apply plugin: 'ivy-publish'
  version currentVersion
  group = 'org.jfrog.example.gradle2'
  println "version: ${-> project.version} status: ${-> project.status}"
}

// Setting this property to true will make the artifactoryPublish task
// skip this module (in our case, the root module):
// HOW TO CALL THIS CONDITIONQLLY ??
afterEvaluate  { p ->
  println "##teamcity[blockOpened name='taskGraph' desscription='Task graph ready']"
  Task t = p.tasks.findByPath(":artifactoryPublish") 
  if( t != null ){
      println "##teamcity[message text='HAS artifactoryPublish']"
      //rootProject.tasks["artifactoryPublish"].setProperty("skip",true)
      t.setProperty("skip","true")
  } else {
      println "##teamcity[message text='DOES NOT HAAVE artifactoryPublish']"
   rootProject.allprojects {
     repositories { 
      jcenter() 
     }
    }
  }
  println "##teamcity[blockClosed name='taskGraph']"
} 
task wrapper(type: Wrapper) { 
  gradleVersion = '2.11'
}
def esc( s )
{
   [ "'" : '|\'' , '(\\[nr|\\[\\]])' : '|$1' , '\\\\u' : '|0x' ].each { n,v  ->
     s = s.replaceAll(n,v)
   }
   return "'$s'";
}      
def tcService( String name , String value )
{ 
   println "##teamcity[$name " + esc(value) + "]"
}
def tcService( String name , Map nv )
{
   String s=''
   nv.each { prop,value -> 
     s+= ' ' 
     s+= prop 
     s+= '=' 
     s+= esc(value) 
   }
   println "##teamcity[$name$s]"
}
def tcMessage( String msg ) {
  tcService( "message" , [ text: msg ] )
}

def tcSet( String name, String value ){
  tcService( "setParameter" , [ name: name , value: value ] )
}

def tcOpen( String msg ) {
  tcService( "blockOpen" , [ name: msg ] )
}

def tcClose( String msg ) {
  tcService( "blockClose" , [ name: msg ] )
}
def tcBuild( buildNum )  {
  tcService( "buildNumber" , buildNum )

}
task tcprops( type: Task ) {
  doLast {
    tcOpen 'settingBuild' 
    def buildNum=project.getProperty("build.number")
    tcMessage(  "a message = currentVersion=${currentVersion} buildNum=${buildNum}")
    def newBuild="new-${buildNum}-${currentVersion}" 
    tcMessage( "setting build to $newBuild" )
    tcSet( "testProperty" , currentVersion  )
    tcBuild( newBuild )
    tcClose( 'settingBuild' )
 }
}

configure(javaProjects()) {
    apply plugin: 'java'


    dependencies {
        testCompile 'junit:junit:4.7'
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact(file("$rootDir/gradle.properties"))
            }
        }
    }
}

project('api') {


    publishing {
        publications {
            ivyJava(IvyPublication) {
                from components.java
                artifact(file("$rootDir/settings.gradle")) {
                    name "gradle-settings"
                    extension "txt"
                    type "text"
                }
               
            }
        }
    }

}
task build(type: Task ) <<  {
   println "Building"
}
allprojects {
build.finalizedBy { 
    def testProperty = project.hasProperty('testProperty') ? project.property('testProperty') : '<none>';
    tcmessage(  'message' , [ text:"testProperty is $testProperty" ] )
}
}
